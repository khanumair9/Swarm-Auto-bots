#include <esp_now.h>
#include <WiFi.h>
#include <Arduino.h>
#include <analogWrite.h>
int in1 = 27;
int in2 = 26;
int in3 = 25;
int in4 = 33;
int ENA = 14;
int ENB = 12;
int ABS = 145;
int ABS2 = 145;
int ABS3 = 170;
int ABS4 = 170;
void _mForward(){
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);
  digitalWrite(in3, HIGH);
  digitalWrite(in4, LOW);
   digitalWrite(in1, HIGH);
  analogWrite(ENA, ABS);
  analogWrite(ENB, ABS2);
  Serial.print("ROBOT_MOVING_FARWARD");
}

void _mBack(){
  digitalWrite(in1, LOW);
  digitalWrite(in2, HIGH);
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH);
  analogWrite(ENA, ABS);
  analogWrite(ENB, ABS2);
  Serial.print("ROBOT_MOVING_BACKWARD");
}

void _mleft(){
  digitalWrite(in1, HIGH);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH);
  analogWrite(ENA, ABS3);
  analogWrite(ENB, ABS4);
  Serial.print("ROBOT_MOVING_LEFT");
}

void _mright(){
  digitalWrite(in1, LOW);
  digitalWrite(in2, HIGH);
  digitalWrite(in3, HIGH);
  digitalWrite(in4, LOW);
  analogWrite(ENA, ABS3);
  analogWrite(ENB, ABS4);
  Serial.print("ROBOT_MOVING_RIGHT");
}

void _mStop(){
  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW);
  analogWrite(ENA, LOW);
  analogWrite(ENB, LOW);
  Serial.print("ROBOT_STOP");
}


typedef struct struct_message {
  int a; 
} struct_message;

// Create a struct_message called myData
struct_message myData;

// callback function that will be executed when data is received
void OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len) {
  memcpy(&myData, incomingData, sizeof(myData));
  Serial.print("Bytes received from MASTER : ");
  Serial.print("Data :");
  Serial.println(myData.a);

  
}
 
void setup() {
  
  // Initialize Serial Monitor
  Serial.begin(115200);
    pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);
  pinMode(ENA, OUTPUT);
  pinMode(ENB, OUTPUT);

  _mStop();
  
  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);

  // Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }
  
  // Once ESPNow is successfully Init, we will register for recv CB to
  // get recv packer info
//  esp_now_register_recv_cb(OnDataRecv);
}
 
void loop() {
  
  esp_now_register_recv_cb(OnDataRecv);

if(myData.a==1)
  {
      _mForward(); 
        delay(100);
//      return;
      }

 if(myData.a==2)
  {
      _mStop(); 
        delay(100);
//        return;
      }
      
 if(myData.a==3)
  {
      _mright(); 
        delay(100);
//        return;
      }
      
 if(myData.a==4)
  {
      _mleft(); 
        delay(100);
//        return;
      }   
if (myData.a==5)
  {
      _mBack(); 
        delay(100);
//        return;
  }
//      return;
}
